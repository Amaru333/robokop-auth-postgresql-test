generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  email              String               @unique
  createdAt          DateTime             @default(now())
  name               String?
  profilePicture     String?
  savedQueries       SavedQuery[]
  WebAuthnCredential WebAuthnCredential[]
}

model SavedQuery {
  id        String   @id @default(uuid())
  userId    String
  name      String?
  query     Json
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WebAuthnCredential {
  id           String   @id @default(uuid())
  userId       String
  counter      Int      @default(0)
  transports   String[]
  createdAt    DateTime @default(now())
  backedUp     Boolean  @default(false)
  deviceType   String?
  publicKey    String
  credentialId String   @unique
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model sessions {
  sid    String   @id(map: "session_pkey") @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}
